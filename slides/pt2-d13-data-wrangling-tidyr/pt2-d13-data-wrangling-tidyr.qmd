---
title: "rbtl - Data wrangling with tidyr"
author: "Lars Sch√∂bitz"
institute: "Global Health Engineering - ETH Zurich"
date: '
  `r Sys.Date()`'
format: 
  revealjs: 
    theme: [default, "../slides.scss"]
    chalkboard: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
#| child: "../setup.Rmd"
```

```{r}
library(tidyverse)
library(knitr)

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))

```

```{r}

waste_data_lord1 <- read_csv(
  here::here("slides/pt2-d13-data-wrangling-tidyr/data/waste-characterisation-lord-of-the-bins-sheet1.csv"))

waste_data_lord2 <- read_csv(
  here::here("slides/pt2-d13-data-wrangling-tidyr/data/waste-characterisation-lord-of-the-bins-sheet2.csv"))

survey_data <- read_csv(here::here("slides/pt2-d13-data-wrangling-tidyr/data/survey-data-partners-in-grime.csv")) %>% 
  mutate(id = seq(1:n()))

survey_data_small <- survey_data %>% 
  select(id, job, price_glass)

survey_data_tidy <- survey_data %>% 
  select(id, job, residence_situation, starts_with("price")) %>% 
  pivot_longer(cols = starts_with("price"),
               names_to = "waste_category",
               values_to = "price") %>% 
  mutate(waste_category = str_remove(waste_category, pattern = "price_")) %>% 
  mutate(price_new = case_when(
    price == "5 to 10" ~ "7.5",
    price == "05-Oct" ~ "7.5",
    str_detect(price, pattern = "20") == TRUE ~ "20",
    str_detect(price, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price
  )) %>% 
  mutate(price = as.numeric(price_new)) %>% 
  select(-price_new)

survey_data_tidy %>% 
  count(job, residence_situation, waste_category, price) %>% 
  ggplot(aes(x = factor(price), y = n, fill = job)) +
  geom_col()

```

```{r}
#| eval: true

waste_data <- bind_rows(waste_data_lord1, waste_data_lord2) 

waste_data_untidy <- waste_data %>% 
  filter(!is.na(objid)) %>% 
  rename(non_recyclable_Kg = `non_recyclables_ Kg`,
         recyclable_Kg = recyclables_Kg) %>%
  relocate(c(recyclable_Kg, non_recyclable_Kg), .before = weight_total_kg) %>% 
  select(objid, location, pet_Kg:weight_total_kg) %>% 
  mutate(objid = factor(objid)) %>%
  rename_with(~str_remove(.x, "_Kg|_kg")) %>% 
  rename_with(~str_remove(.x, "_content")) %>% 
  rename(total = weight_total)


waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_tidy <- waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  mutate(objid = factor(objid)) %>%
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) %>% 
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) %>% 
  relocate(type, .before = weight) %>% 
  group_by(objid) %>% 
  mutate(percent = weight / sum(weight) * 100)

```


```{r}
#| eval: false

waste_data_tidy %>% 
  group_by(location, waste_category) %>% 
  summarise(weight = mean(weight)) %>% 
  group_by(location) %>% 
  mutate(percent = weight / sum(weight) * 100) 

waste_data_tidy %>% 
  
  ggplot(mapping = aes(x = waste_category, y = weight, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)

waste_data_tidy %>% 
  ggplot(mapping = aes(x = objid, y = weight)) +
  geom_col() 

waste_data_tidy %>% 
  ggplot(mapping = aes(x = objid, y = weight, fill = waste_category)) +
  geom_col() 

waste_data_tidy %>% 
  ggplot(mapping = aes(x = waste_category, y = percent, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)


waste_data_tidy %>% 
  ggplot(aes(x = objid, y = percent, fill = waste_category)) +
  geom_col() 

waste_data_tidy %>% 
  ggplot(aes(x = objid, y = percent, fill = type)) +
  geom_col() 

waste_data_tidy %>% 
  ggplot(aes(x = objid, y = percent, fill = location)) +
  geom_col() +
  facet_wrap(~waste_category, ncol = 5)
```


```{r}
```

# Today

1. Part 1: Data types and vectors
    - Live Coding Exercise
2. Part 2: tidyr - long and wide formats
    - Live Coding Exercise
3. Part 3: dplyr - joining data
    - Live Coding Exercise
4. Homework Assignment 13
5. Programming Exercise

# Learning Objectives

1. Learners can apply functions from the ~~tidyr~~ (actually dplyr) R Package to join multiple data sets
2. Learners can apply functions from the tidyr R Package to transform their data from a wide to a long format and vice versa

# Part 1: Data types and vectors

## Why care about data types?

<div style="width:75%;height:0;padding-bottom:83%;position:relative;"><iframe src="https://giphy.com/embed/SvRuvlSEa67wNNHuHy" width="75%" height="75%" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen></iframe></div><p><a href="https://giphy.com/gifs/Friends-episode-20-friends-tv-the-one-with-baby-shower-SvRuvlSEa67wNNHuHy">via GIPHY</a></p>

## Example: survey data {.smaller}

```{r}
#| echo: true
survey_data_small
```

## Oh why won't you work?! {.smaller}

```{r}
#| echo: true
survey_data_small %>% 
  summarise(mean_price_glass = mean(price_glass))

```

## Oh why won't you still work??!! {.smaller}

```{r}
#| echo: true
survey_data_small %>% 
  summarise(mean_price_glass = mean(price_glass, na.rm = TRUE))
```

## Take a breath and look at your data {.smaller}

```{r}
#| echo: true
glimpse(survey_data_small)
```

## Very common data tidying step! {.smaller}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|2|3,4|5,6|7"

survey_data_small %>% 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) 
```

## Very common data tidying step! {.scrollable .smaller}

```{r}
#| echo: false
#| eval: true
survey_data_small %>% 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) %>% 
  relocate(price_glass_new, .after = job) %>% 
  print(n = 22)
```

## Sumamrise? Argh!!!!  {auto-animate="true" .smaller}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9"

survey_data_small %>% 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) %>% 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))
  
```

## Always respect your data types!  {auto-animate="true" .smaller}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9|10"

survey_data_small %>% 
  mutate(price_glass_new = case_when(
    price_glass == "5 to 10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) %>% 
  mutate(price_glass_new = as.numeric(price_glass_new)) %>% 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))
  
```

## Live Coding Exercise

**ae-13-data-wrangling-tidyr**

1. Head over to the GitHub Organisation for the course.
2. Find the repo for week 13 that has your GitHub username.
3. Clone the repo with your username to the RStudio Cloud.
4. Open the file: `ae-13a-tidyr.qmd`
5. Use your Sticky Notes to let me know when you are ready.

# Break One

![](img/coffee-break.jpg)

```{r}

countdown(
  minutes = 15, seconds = 0,
  left = 0, right = 0,
  padding = "10px", margin = "5%",
  font_size = "2em"
)

```

::: aside
Photo by [Blake Wisz](https://unsplash.com/@blakewisz)
:::

# Part 2: tidyr - long and wide formats {background-color="#0F4C81"}

## . {background-image="img/tidydata_1.jpg" background-size="contain"}


::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## . {background-image="img/tidydata_2.jpg" background-size="contain"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## . {background-image="img/tidydata_3.jpg" background-size="contain"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by [Julia Lowndes](https://twitter.com/juliesquid) and [Allison Horst](https://twitter.com/allison_horst)
:::

## A grammar of data tidying {.smaller}

:::: {.columns}

::: {.column width="40%"}

```{r dplyr-part-of-tidyverse, echo=FALSE, out.width="60%", caption = "tidyr is part of the tidyverse"}
knitr::include_graphics("img/tidyr-part-of-tidyverse.png")
```

:::

::: {.column width="60%"}

The goal of tidyr is to help you tidy your data via

- pivoting for going between wide and long data
- splitting and combining character columns
- nesting and unnesting columns
- clarifying how `NA`s should be treated
:::

::::

::: aside
Slide taken from [Data Science in a Box](https://datasciencebox.org/)
:::

## Pivoting data

```{r echo=FALSE, out.width="45%", out.extra ='style="background-color: #FDF6E3"'}
knitr::include_graphics("img/tidyr-longer-wider.gif")
```

## Waste characterisation data {.smaller}

```{r, out.width="90%"}

waste_data_untidy %>% 
  knitr::kable(digits = 2)

```


## How would you plot this?

```{r}

ggplot(data = waste_data_untidy,
       mapping = aes(x = objid, y = total, fill = location)) +
  geom_col() 

```

## And this?

```{r}

ggplot(data = waste_data_tidy,
       mapping = aes(x = objid, y = weight, fill = waste_category)) +
  geom_col() 

```

## You need: A long format {.smaller .scrollable}

```{r}

waste_data_tidy %>% 
  select(-percent, -type) %>% 
  knitr::kable(digits = 2)

```

## Reminder: The wide format {.smaller .scrollable}

```{r}
waste_data_untidy %>% 
  knitr::kable(digits = 2)
```

## Or this?

```{r}

waste_data_tidy %>% 
  ggplot(aes(x = objid, y = percent, fill = type)) +
  geom_col() 

```

## Calculate percentages {.smaller .scrollable}

```{r}

waste_data_tidy %>% 
  knitr::kable(digits = 2)

```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
waste_data_untidy 
```

```{r}
#| echo: false
waste_data_untidy %>% 
  knitr::kable(digits = 2)
```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"
waste_data_untidy %>% 
  select(objid:paper, non_recyclable) 
```

```{r}
#| echo: false
waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  knitr::kable(digits = 2)

```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"
waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) 

```

```{r}
#| echo: false
waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  knitr::kable(digits = 2)

```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1|6-8|9-10"
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, 
                                 levels = waste_category_levels)) 

```

```{r}
#| echo: false
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) %>% 
  knitr::kable(digits = 2)

```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "11-13|14"
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, 
                                 levels = waste_category_levels)) %>%
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) %>% 
  relocate(type, .before = weight)
```

```{r}
#| echo: false
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) %>%
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) %>% 
  relocate(type, .before = weight) %>% 
  knitr::kable(digits = 2)
```

## How to {auto-animate="true" .smaller .scrollable}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "15-16"
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, 
                                 levels = waste_category_levels)) %>% 
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) %>% 
  relocate(type, .before = weight) %>% 
  group_by(objid) %>% 
  mutate(percent = weight / sum(weight) * 100)
```

```{r}
#| echo: false
waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_untidy %>% 
  select(objid:paper, non_recyclable) %>% 
  rename(other = non_recyclable) %>% 
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") %>% 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) %>% 
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) %>% 
  relocate(type, .before = weight) %>% 
  group_by(objid) %>% 
  mutate(percent = weight / sum(weight) * 100) %>% 
  knitr::kable(digits = 2)

```


## Live Coding Exercise

**ae-13-data-wrangling-tidyr**

1. Back to `ae-13a-tidyr.qmd`

# Break Two

![](img/coffee-break.jpg)

```{r}

countdown(
  minutes = 10, seconds = 0,
  left = 0, right = 0,
  padding = "10px", margin = "5%",
  font_size = "2em"
)

```

::: aside
Photo by [Blake Wisz](https://unsplash.com/@blakewisz)
:::

# Part 3: dplyr - joining data {background-color="#0F4C81"}

##  We... {.smaller}

...have multiple data frames

...want to bring them together

```{r}
#| echo: false
professions <- read_csv(here::here("slides/pt2-d13-data-wrangling-tidyr/data/scientists/professions.csv"))
dates <- read_csv(here::here("slides/pt2-d13-data-wrangling-tidyr/data/scientists/dates.csv"))
works <- read_csv(here::here("slides/pt2-d13-data-wrangling-tidyr/data/scientists/works.csv"))
```

```{r}
#| echo: true
#| eval: false
professions <- read_csv(here::here("data/scientists/professions.csv"))
dates <- read_csv(here::here("data/scientists/dates.csv"))
works <- read_csv(here::here("scientists/works.csv"))
```

## Data: Women in science {.smaller}


Information on 10 women in science who changed the world

```{r echo=FALSE}
professions %>% select(name) %>% kable()
```

::: aside
Source: [Discover Magazine](https://www.discovermagazine.com/the-sciences/meet-10-women-in-science-who-changed-the-world)
:::

## Inputs {.smaller}

::: {.panel-tabset}

### professions

```{r}
professions %>% 
  kable()
```

### dates

```{r}
dates %>% 
  kable()
```

### works

```{r}
works %>% kable()
```

:::

## Desired output {.smaller}

```{r}
professions %>%
  left_join(dates) %>%
  left_join(works) %>% 
  kable()
```

## Inputs, reminder {.smaller}

:::: {.columns}

::: {.column width="47.5%"}
```{r}
#| echo: true
names(professions)
names(dates)
names(works)
```
:::

::: {.column width="5%"}

:::

::: {.column width="47.5%"}
```{r}
#| echo: true
nrow(professions)
nrow(dates)
nrow(works)
```
:::

::::

# Joining data frames 

## Joining data frames

```{r}
#| echo: true
#| eval: false
something_join(x, y)
```

- `left_join()`: all rows from x
- `right_join()`: all rows from y
- `full_join()`: all rows from both x and y
- ...

## Setup {.smaller}

For the next few slides...

:::: {.columns}

::: {.column width="47.5%"}
```{r}
#| echo: true
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
  )
```

```{r}
#| echo: true
x
```
:::

::: {.column width="5%"}

:::

::: {.column width="47.5%"}
```{r}
#| echo: true
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
  )
```
```{r}
#| echo: true
y
```
:::

::::

## `left_join()` {.smaller}

:::: {.columns}

::: {.column width="47.5%"}
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/left-join.gif")
```
:::

::: {.column width="5%"}

:::

::: {.column width="47.5%"}
```{r}
#| echo: true
left_join(x, y)
```
:::

::::

## `left_join()` {.smaller}

```{r}
#| echo: true
professions %>%
  left_join(dates) 
```

## `right_join()` {.smaller}

:::: {.columns}

::: {.column width="47.5%"}
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/right-join.gif")
```
:::

::: {.column width="5%"}

:::

::: {.column width="47.5%"}
```{r}
#| echo: true
right_join(x, y)
```
:::

::::

## `right_join()` {.smaller}

```{r}
#| echo: true
professions %>%
  right_join(dates)
```

## `full_join()` {.smaller}

:::: {.columns}

::: {.column width="47.5%"}
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/full-join.gif")
```
:::

::: {.column width="5%"}

:::

::: {.column width="47.5%"}
```{r}
#| echo: true
full_join(x, y)
```
:::

::::

## `full_join()` {.smaller}

```{r}
#| echo: true
dates %>%
  full_join(works) 
```

## Putting it altogether {.smaller}

```{r}
#| echo: true
professions %>%
  left_join(dates) %>%
  left_join(works)
```

## Live Coding Exercise

**ae-13-data-wrangling-tidyr**

1. Back to `ae-13a-tidyr.qmd`

# Homework Assignment {background-color="#0F4C81"}

## Submission

- All details in assignment week 13
- Due: Wednesday, 26th May at 23:59 (2 points)

## Evaluation

- 5 mins
- anonymous
- after each lecture

[kutt.it/rbtl-eval](https://forms.gle/HbCPbG9Yb7iDJ2jW6)

# Programming {background-color="#0F4C81"}

## ae-13-data-wrangling-tidyr

1. Open the file: `ae-13b-dplyr.qmd`
2. Work through the exercises
3. Finalise as part of your homework

# Thanks! `r emo::ji("sunflower")`  {background-color="#0F4C81"}

## 

A large proportion of slides in this presentation are either taken from or adapted from [Data Science in a Box](https://datasciencebox.org/)]

Slides created via revealjs and Quarto: https://quarto.org/docs/presentations/revealjs/ 
Access slides as [PDF on GitHub](https://rbtl-fs22.github.io/website/slides/pt2-d13-data-wrangling-tidyr/pt2-d13-data-wrangling-tidyr.pdf)

All material is licensed under [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/). 
